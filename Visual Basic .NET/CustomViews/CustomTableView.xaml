<!--
  Xceed DataGrid for WPF - SAMPLE CODE - Custom Views Sample Application
  Copyright (c) 2007-2024 Xceed Software Inc.

  [CustomTableView.xaml]

  This ResourceDictionary contains various styles and templates defining
  the appearance and behavior of a custom table view layout for Xceed DataGrid.

  This file is part of the Xceed DataGrid for WPF product. The use 
  and distribution of this Sample Code is subject to the terms 
  and conditions referring to "Sample Code" that are specified in 
  the XCEED SOFTWARE LICENSE AGREEMENT accompanying this product.
-->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid">

   <!-- Blue gradient for DataRow's background of male employees. -->
   <LinearGradientBrush x:Key="maleBackground"
                        StartPoint="0.034974093264248704,0.6914893617021277"
                        EndPoint="0.18756476683937826,0.010638297872340425">
      <LinearGradientBrush.GradientStops>
         <GradientStopCollection>
            <GradientStop Color="#FF008acc"
                          Offset="0" />
            <GradientStop Color="#000099cc"
                          Offset="0.9722222089767456" />
         </GradientStopCollection>
      </LinearGradientBrush.GradientStops>
   </LinearGradientBrush>

   <!-- Pink gradient for DataRow's background of female employees. -->
   <LinearGradientBrush x:Key="femaleBackground"
                        StartPoint="0.034974093264248704,0.6914893617021277"
                        EndPoint="0.18756476683937826,0.010638297872340425">
      <LinearGradientBrush.GradientStops>
         <GradientStopCollection>
            <GradientStop Color="#FFae0057"
                          Offset="0" />
            <GradientStop Color="#00D60080"
                          Offset="0.9722222089767456" />
            <GradientStop Color="#00d70081"
                          Offset="0.9777777791023254" />
         </GradientStopCollection>
      </LinearGradientBrush.GradientStops>
   </LinearGradientBrush>

   <ControlTemplate x:Key="customTableViewDataRowTemplate"
                    TargetType="xcdg:DataRow">
      <!-- This Grid is used to layout the GroupLevelIndicatorPane placeholder and the CellsHost panel. -->
      <Grid x:Name="rootGrid">
         <Grid.ColumnDefinitions>
            <!-- HierarchicalGroupLevelIndicatorPane -->
            <ColumnDefinition Width="Auto" />
            <!-- GroupLevelIndicatorPane -->
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />

            <!-- CellsHost panel -->
            <ColumnDefinition Width="*" />
         </Grid.ColumnDefinitions>
         <Grid.RowDefinitions>
            <RowDefinition />
            <RowDefinition />
         </Grid.RowDefinitions>

         <xcdg:HierarchicalGroupLevelIndicatorPane xcdg:TableView.CanScrollHorizontally="False"
                                                   Grid.Column="0" />

         <!-- GroupLevelIndicatorPane is a placeholder for individual GroupLevelIndicator elements that are added
                       whenever this Row is part of a group. -->
         <xcdg:GroupLevelIndicatorPane x:Name="groupLevelIndicatorPane"
                                       xcdg:TableView.CanScrollHorizontally="False"
                                       Grid.Column="1" />

         <Border x:Name="outerBackground"
                 Grid.Column="2"
                 Grid.ColumnSpan="2"
                 Background="{TemplateBinding Background}"
                 BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{TemplateBinding BorderThickness}"
                 xcdg:TableView.CanScrollHorizontally="False" />

         <Border x:Name="rowBorder"
                 Grid.Column="2"
                 Grid.ColumnSpan="2"
                 Grid.RowSpan="2"
                 BorderThickness="1"
                 CornerRadius="3"
                 xcdg:TableView.CanScrollHorizontally="False">
            <Border x:Name="innerBackground"
                    BorderThickness="1"
                    CornerRadius="2" />
         </Border>

         <!-- The PART_CellsHost part designates the Panel to which this Row's Cells should be added.
         In table view types, a FixedCellPanel is required for column management features (e.g. fixed columns, drag&drop column reordering) to be supported -->
         <xcdg:FixedCellPanel x:Name="PART_CellsHost"
                              Grid.Column="3"
                              ColumnStretchMinWidth="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).ColumnStretchMinWidth}"
                              ColumnStretchMode="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).ColumnStretchMode}"
                              FixedCellCount="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).FixedColumnCount, Mode=TwoWay}"
                              SplitterStyle="{TemplateBinding xcdg:TableView.FixedColumnSplitterStyle}"
                              SplitterWidth="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).FixedColumnSplitterWidth}"
                              ShowSplitter="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).ShowFixedColumnSplitter}"
                              FixedColumnDropMarkPen="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).FixedColumnDropMarkPen}"
                              TextElement.Foreground="{TemplateBinding Foreground}"
                              Margin="{TemplateBinding BorderThickness}" />

         <!-- Preview Row  -->
         <TextBlock Text="{Binding Notes}"
                    Grid.Column="3"
                    Grid.Row="1"
                    TextWrapping="Wrap"
                    Width="600"
                    HorizontalAlignment="Left"
                    Margin="{TemplateBinding BorderThickness}" />

      </Grid>

      <ControlTemplate.Triggers>

         <!-- This trigger is used to display the Active Selection look -->
         <!-- When changing the appearance (e.g. background/foreground) of the DataRow to reflect specific
              states (e.g. IsSelected), it is recommended to apply the changes directly to the template
              elements because we want those modifications to be effective even when a value has been
              explicitely set to these properties on the TemplatedParent. Also, when someone queries
              the value of these properties on the TemplatedParent, we don't want to return the
              intermediate, state-specific values. -->

         <!-- When the DataRow is Selected, we want to change its background/foreground to the appropriate brushes. -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsSelected}"
                          Value="True" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(xcdg:DataGridControl.DataGridContext).DataGridControl.IsKeyboardFocusWithin}"
                          Value="True" />

            </MultiDataTrigger.Conditions>

            <Setter TargetName="rowBorder"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SelectionBackground}" />

            <Setter TargetName="rootGrid"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SelectionForeground}" />

         </MultiDataTrigger>

         <!-- When the DataRow is Selected but the parent DataGridControl is not focused, we want to change
              the DataRow's background/foreground to the appropriate brushes. -->
         <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsSelected}"
                          Value="True" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(xcdg:DataGridControl.DataGridContext).DataGridControl.IsKeyboardFocusWithin}"
                          Value="False" />

               <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(xcdg:DataGridControl.DataGridContext).DataGridControl.HideSelection}"
                          Value="False" />

            </MultiDataTrigger.Conditions>

            <Setter TargetName="rowBorder"
                    Property="Background"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=InactiveSelectionBackground}" />

            <Setter TargetName="rootGrid"
                    Property="TextElement.Foreground"
                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=InactiveSelectionForeground}" />

         </MultiDataTrigger>

      </ControlTemplate.Triggers>

   </ControlTemplate>

   <!-- This will eventually be used as an implicit style for all DataRows. -->
   <Style x:Key="customTableViewDataRowStyle"
          TargetType="{x:Type xcdg:DataRow}">

      <Setter Property="Background"
              Value="{StaticResource maleBackground}" />

      <Setter Property="Template"
              Value="{StaticResource customTableViewDataRowTemplate}" />

      <Style.Triggers>
         <!-- To access one of the cells in the System.Data.DataRow, its name indexer must be used. -->
         <DataTrigger Binding="{Binding [TitleOfCourtesy]}"
                      Value="Ms.">
            <Setter Property="Background"
                    Value="{StaticResource femaleBackground}" />
         </DataTrigger>

         <!-- To access one of the cells in the System.Data.DataRow, its name indexer must be used. -->
         <DataTrigger Binding="{Binding [TitleOfCourtesy]}"
                      Value="Mrs.">
            <Setter Property="Background"
                    Value="{StaticResource femaleBackground}" />
         </DataTrigger>
      </Style.Triggers>

   </Style>

   <Style x:Key="wingdingsText"
          TargetType="TextBlock">
      <Setter Property="FontFamily"
              Value="Wingdings" />
   </Style>

   <!-- This TableView instance will be assign in code when the TableView sample
        is activated. -->
   <!-- In this sample, you can define the defaultTheme resource to specify the default 
        theme this DataGridControl will be in. This is not mandatory, so we
        use a DynamicResource to silently ignore its absence. -->
   <xcdg:TableView x:Key="tableViewInstance"
                   Theme="{DynamicResource defaultAeroTheme}"
                   ShowFixedColumnSplitter="False"
                   UseDefaultHeadersFooters="False">

      <xcdg:TableView.FixedHeaders>
         <!-- The "UseDefaultHeadersFooters" specified above prevents the creation of the 
              default FixedHeaders content.
              Our goal here is to remove the GroupByRow that is present by default in 
              the FixedHeaders and only keep the ColumnManagerRow. -->
         <DataTemplate>
            <xcdg:ColumnManagerRow />
         </DataTemplate>
      </xcdg:TableView.FixedHeaders>

      <xcdg:TableView.FixedFooters>
         <!-- Anything can be added to the various DataGridControl collections (FixedHeaders,
              Headers, Items, Footers and FixedFooters). But it has to be wrapped in a DataTemplate.-->
         <DataTemplate>
            <Border BorderBrush="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).HorizontalGridLineBrush}"
                    BorderThickness="1">
               <TextBlock Padding="2">
                  <Span FontFamily="Wingdings">^</Span>: Aries<Run Text="   " />
                  <Span FontFamily="Wingdings">_</Span>: Taurus<Run Text="   " />
                  <Span FontFamily="Wingdings">`</Span>: Gemini<Run Text="   " />
                  <Span FontFamily="Wingdings">a</Span>: Cancer<Run Text="   " />
                  <Span FontFamily="Wingdings">b</Span>: Leo<Run Text="   " />
                  <Span FontFamily="Wingdings">c</Span>: Virgo<Run Text="   " />
                  <Span FontFamily="Wingdings">d</Span>: Libra<Run Text="   " />
                  <Span FontFamily="Wingdings">e</Span>: Scorpio<Run Text="   " />
                  <Span FontFamily="Wingdings">f</Span>: Sagittarius<Run Text="   " />
                  <Span FontFamily="Wingdings">g</Span>: Capricorn<Run Text="   " />
                  <Span FontFamily="Wingdings">h</Span>: Aquarius<Run Text="   " />
                  <Span FontFamily="Wingdings">i</Span>: Pisces<Run Text="   " />
               </TextBlock>
            </Border>
         </DataTemplate>
      </xcdg:TableView.FixedFooters>
   </xcdg:TableView>

</ResourceDictionary>
