<!--
  Xceed DataGrid for WPF - SAMPLE CODE - Card View Sample Application
  Copyright (c) 2007-2024 Xceed Software Inc.

  [MainPage.xaml]

  This Page contains the UI declarations of the Card View sample.

  This file is part of the Xceed DataGrid for WPF product. The use 
  and distribution of this Sample Code is subject to the terms 
  and conditions referring to "Sample Code" that are specified in 
  the XCEED SOFTWARE LICENSE AGREEMENT accompanying this product.
-->

<Page x:Class="Xceed.Wpf.DataGrid.Samples.CardView.MainPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"
      xmlns:local="clr-namespace:Xceed.Wpf.DataGrid.Samples.CardView"
      xmlns:s="clr-namespace:System;assembly=mscorlib"
      xmlns:compModel="clr-namespace:System.ComponentModel;assembly=WindowsBase">
   <Page.Resources>

      <xcdg:DataGridCollectionViewSource x:Key="cvsContacts"
                                         Source="{Binding Source={x:Static Application.Current},Path=Contacts}"
                                         AutoFilterMode="And" />

      <!-- This template will be used in the card title and in the scroll tip. Its target
           is a DataItem in both cases (naturally). Since we're bound to a DataTable, a 
           DataItem is ultimately a System.Data.DataRow, so we use the [] field accessor. -->
      <DataTemplate x:Key="cardTitleDataTemplate">
         <StackPanel Orientation="Horizontal">
            <TextBlock Text="{Binding [LastName]}" />
            <TextBlock Text=", " />
            <TextBlock Text="{Binding [FirstName]}" />
         </StackPanel>
      </DataTemplate>

      <!-- This template containing the ColumnManagerRow and GroupByControl is 
           added in code when the corresponding CheckBox is checked. -->
      <DataTemplate x:Key="cardViewColumnManagerRowAndGroupByControl">
         <DockPanel MinHeight="60">
            <Border DockPanel.Dock="Right"
                    Height="{Binding ElementName=groupByControl, Path=ActualHeight, Mode=OneWay, FallbackValue=60}">
               <xcdg:ColumnManagerRow x:Name="columnManagerRow"
                                      AllowAutoFilter="{Binding Source={x:Static local:ConfigurationData.Singleton}, Path=FilteringMethodAuto}" />
            </Border>

            <xcdg:GroupByControl x:Name="groupByControl" />
         </DockPanel>
      </DataTemplate>

      <!-- This DataTemplate containing a FilterRow will be added in the 
           Headers if the corresponding RadioButton is checked in the 
           ConfigurationPanel. This is done in code-behind. -->
      <DataTemplate x:Key="filterRowTemplate">
         <xcdg:FilterRow />
      </DataTemplate>

      <!-- This template containing an InsertionRow is added in code when the 
           corresponding CheckBox is checked. -->
      <DataTemplate x:Key="cardViewInsertionRow">
         <xcdg:InsertionRow />
      </DataTemplate>

      <!-- An Xceed DataGrid view can be styled. 
           Most of the properties set in this Style will be bound to the configuration 
           data which are handled by the configuration panel.
           Properties that cannot be set in a Style are handled in the code-behind for MainPage. -->
      <Style x:Key="cardViewStyle"
             TargetType="xcdg:CardView">
         <Setter Property="CardTitleTemplate"
                 Value="{StaticResource cardTitleDataTemplate}" />

         <Setter Property="ScrollTipContentTemplate"
                 Value="{StaticResource cardTitleDataTemplate}" />

         <!-- Because the content of a collection cannot be set in a Style, the view's 
              FixedHeaders content is handled in code behind. -->
         <Setter Property="UseDefaultHeadersFooters"
                 Value="False" />

         <Setter Property="HideEmptyCells"
                 Value="{Binding Source={x:Static local:ConfigurationData.Singleton}, Path=HideEmptyCells}" />

         <Setter Property="AllowCardResize"
                 Value="{Binding Source={x:Static local:ConfigurationData.Singleton}, Path=AllowCardResize}" />

         <Setter Property="ShowScrollTip"
                 Value="{Binding Source={x:Static local:ConfigurationData.Singleton}, Path=ShowScrollTip}" />

         <Setter Property="AllowColumnChooser"
                 Value="{Binding Source={x:Static local:ConfigurationData.Singleton}, Path=AllowColumnChooser}" />

         <Setter Property="ShowSortIndex"
                 Value="{Binding Source={x:Static local:ConfigurationData.Singleton}, Path=ShowSortIndex}" />
      </Style>

      <!-- Implicit style for CardView. -->
      <Style TargetType="xcdg:CardView"
             BasedOn="{StaticResource cardViewStyle}" />

      <!-- Implicit style for CompactCardView. -->
      <Style TargetType="xcdg:CompactCardView"
             BasedOn="{StaticResource cardViewStyle}" />
   </Page.Resources>

   <DockPanel>
      <ContentControl x:Name="parametersHost"
                      DockPanel.Dock="Top"
                      Style="{StaticResource parametersHostStyle}">
         <local:ConfigurationPanel />
      </ContentControl>

      <xcdg:DataGridControl x:Name="grid"
                            ItemsSource="{Binding Source={StaticResource cvsContacts}}"
                            EditTriggers="BeginEditCommand,ActivationGesture,ClickOnCurrentCell"
                            ItemScrollingBehavior="{Binding Source={x:Static local:ConfigurationData.Singleton}, Path=ItemScrollingBehavior}"
                            FlowDirection="{Binding Source={x:Static local:ConfigurationData.Singleton}, Path=FlowDirection}">
         <xcdg:DataGridControl.View>
            <!-- In this sample, you can define the defaultTheme resource to specify 
                 the default theme this DataGridControl will be in. This is not 
                 mandatory, so we use a DynamicResource to silently ignore its absence. -->
            <xcdg:CompactCardView Theme="{DynamicResource defaultTheme}" />
         </xcdg:DataGridControl.View>

         <xcdg:DataGridControl.Columns>
            <!-- Hide ContactID column-->
            <xcdg:Column FieldName="ContactID"
                         Visible="False"
                         ShowInColumnChooser="False"
                         IsMainColumn="False" />
         </xcdg:DataGridControl.Columns>
      </xcdg:DataGridControl>
   </DockPanel>
</Page>
