<!--
  Xceed DataGrid for WPF - SAMPLE CODE - MVVM Sample Application
  Copyright (c) 2007-2024 Xceed Software Inc.

  [ProductsCollectionViewResources.xaml]

  This Page contains resource declarations for the ViewModel of the MVVM sample.
  NOTE :
      This xaml could have been written in code behind directly in the MainPageViewModel.cs file.
      The use of this ResourceDictionary is simply a means to an end, that is, to enable the declaration and configuration of the DataGridCollectionView in xaml,
      which is easier, cleaner, and clearer to do in xaml than in code behind.  It is not to be confused with the xaml used with the View.
      This is strickly related to the ViewModel.  It is loaded by the MainPageViewModel class the first time its ProductsCollectionView property is accessed.

  This file is part of the Xceed DataGrid for WPF product. The use 
  and distribution of this Sample Code is subject to the terms 
  and conditions referring to "Sample Code" that are specified in 
  the XCEED SOFTWARE LICENSE AGREEMENT accompanying this product.
-->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:compModel="clr-namespace:System.ComponentModel;assembly=WindowsBase"
                    xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"
                    xmlns:viewModel="clr-namespace:Xceed.Wpf.DataGrid.Samples.MVVM.ViewModel">

   <!--Definition part of the collection view to which the DataGrid is bound.-->
   <xcdg:DataGridCollectionViewSource x:Key="productsCollectionViewSource"
                                      Source="{Binding Source={x:Static Application.Current}, Path=MainPageViewModelInstance.Products}"
                                      AutoFilterMode="And"
                                      AutoCreateDetailDescriptions="False">

      <!--Only need to provide ItemProperty for foreign key columns-->
      <xcdg:DataGridCollectionViewSource.ItemProperties>
         <xcdg:DataGridItemProperty Name="CategoryID">
            <!--This is needed so sorting is based on displayed value, not on key value-->
            <xcdg:DataGridItemProperty.ForeignKeyDescription>
               <xcdg:DataGridForeignKeyDescription ItemsSource="{Binding Source={x:Static Application.Current}, Path=MainPageViewModelInstance.Categories}"
                                                   ValuePath="CategoryID"
                                                   DisplayMemberPath="CategoryName" />
            </xcdg:DataGridItemProperty.ForeignKeyDescription>
         </xcdg:DataGridItemProperty>

         <xcdg:DataGridItemProperty Name="SupplierID">
            <!--This is needed so sorting is based on displayed value, not on key value-->
            <xcdg:DataGridItemProperty.ForeignKeyDescription>
               <xcdg:DataGridForeignKeyDescription ItemsSource="{Binding Source={x:Static Application.Current}, Path=MainPageViewModelInstance.Suppliers}"
                                                   ValuePath="SupplierID"
                                                   DisplayMemberPath="CompanyName" />
            </xcdg:DataGridItemProperty.ForeignKeyDescription>
         </xcdg:DataGridItemProperty>

         <!--Prevent this property from being displayed in the View-->
         <xcdg:DataGridItemProperty Name="IsModified"
                                    IsDisplayable="False" />
      </xcdg:DataGridCollectionViewSource.ItemProperties>

      <!--Set a default grouping on the data at the master level-->
      <xcdg:DataGridCollectionViewSource.GroupDescriptions>
         <xcdg:DataGridGroupDescription PropertyName="SupplierID" />
      </xcdg:DataGridCollectionViewSource.GroupDescriptions>

      <!--Set a default sorting on the data at the master level-->
      <xcdg:DataGridCollectionViewSource.SortDescriptions>
         <compModel:SortDescription PropertyName="SupplierID" />
      </xcdg:DataGridCollectionViewSource.SortDescriptions>

      <!--Setup the (custom) statistical function that is required by the View at the master level-->
      <xcdg:DataGridCollectionViewSource.StatFunctions>
         <viewModel:CountIfFunction SourcePropertyName="Discontinued"
                                    ResultPropertyName="MaintainedCount"
                                    ValueToCountIsTrue="False" />
      </xcdg:DataGridCollectionViewSource.StatFunctions>

      <!--Definition part of the detail level.
          Only required because a statistical function needs to be defined (and because AutoCreateDetailDescriptions is set to false on DataGridCollectionViewSource.-->
      <xcdg:DataGridCollectionViewSource.DetailDescriptions>
         <xcdg:PropertyDetailDescription RelationName="OrderDetails"
                                         AutoFilterMode="And">

            <xcdg:PropertyDetailDescription.ItemProperties>
               <!--Prevent this property from being displayed in the View-->
               <xcdg:DataGridItemProperty Name="IsModified"
                                          IsDisplayable="False" />
            </xcdg:PropertyDetailDescription.ItemProperties>

            <!--Setup the statistical function that is required by the View at the detail level-->
            <xcdg:PropertyDetailDescription.StatFunctions>
               <xcdg:SumFunction SourcePropertyName="Quantity"
                                 ResultPropertyName="TotalProductsOrders" />
            </xcdg:PropertyDetailDescription.StatFunctions>
         </xcdg:PropertyDetailDescription>
      </xcdg:DataGridCollectionViewSource.DetailDescriptions>
   </xcdg:DataGridCollectionViewSource>
</ResourceDictionary>