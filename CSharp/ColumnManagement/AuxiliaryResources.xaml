<!--
  Xceed DataGrid for WPF - SAMPLE CODE - Column Management Sample Application
  Copyright (c) 2007-2024 Xceed Software Inc.

  [AuxiliaryResources.xaml]

  This ResourceDictionary contains styles and templates useful for some features of this
  sample but not directly related to what it demonstrates.

  This file is part of the Xceed DataGrid for WPF product. The use 
  and distribution of this Sample Code is subject to the terms 
  and conditions referring to "Sample Code" that are specified in 
  the XCEED SOFTWARE LICENSE AGREEMENT accompanying this product.
-->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"
                    xmlns:local="clr-namespace:Xceed.Wpf.DataGrid.Samples.ColumnManagement">

   <!-- Define a resource for the converters needed by the cell content templates. -->
   <local:FlagPathConverter x:Key="flagconverter" />

   <!-- DataTemplate to display the name of the Country followed by the flag -->
   <DataTemplate x:Key="countryCellContentTemplate">
      <Grid>
         <Grid.ColumnDefinitions>
            <ColumnDefinition Width="30" />
            <ColumnDefinition Width="*" />
         </Grid.ColumnDefinitions>

         <Image Grid.Column="0"
                Margin="1,1,4,1"
                VerticalAlignment="Top"
                Source="{Binding Converter={StaticResource flagconverter}}" />

         <TextBlock Text="{Binding}"
                    Grid.Column="1"
                    Margin="2,0,4,0"
                    VerticalAlignment="Top" />
      </Grid>
   </DataTemplate>

   <!-- The ColumnPropertyRows can be edited by pressing a key accepted by the cell 
        editor (typically, a digit key), clicking on the current cell or pressing F2. -->
   <Style TargetType="local:ColumnPropertyRow">
      <Setter Property="EditTriggers"
              Value="ActivationGesture,ClickOnCurrentCell,BeginEditCommand"/>

      <Setter Property="xcdg:GroupLevelIndicatorPane.ShowIndicators"
              Value="False"/>

      <Style.Triggers>
         <Trigger Property="IsCurrent"
                  Value="True">
            <Setter Property="Background"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=SelectionBackground}" />

            <Setter Property="Foreground"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=SelectionForeground}" />
         </Trigger>
      </Style.Triggers>
   </Style>

   <!-- This ColumnPropertyCell style highlights the cell's content when its
        corresponding data item field is set to a local value (see the 
        IsColumnPropertySet property in the ColumnPropertyCell class definition). -->
   <Style TargetType="local:ColumnPropertyCell">
      <Style.Triggers>
         <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsColumnPropertySet}"
                      Value="True">
            <Setter Property="Foreground"
                    Value="#D85402"/>

            <Setter Property="CurrentForeground"
                    Value="#D85402"/>

            <Setter Property="FontWeight"
                    Value="Bold"/>
         </DataTrigger>
      </Style.Triggers>
   </Style>

   <!-- This TableflowView implicit style artificially widens the RowSelectorPane, which 
        will allow the addition of a row description (for our custom ColumnPropertyRow). -->
   <Style TargetType="xcdg:TableflowView">
      <Style.Triggers>
         <DataTrigger Binding="{Binding Source={x:Static local:ConfigurationData.Singleton}, Path=UseAdvancedColumnManagement}"
                      Value="True">
            <Setter Property="RowSelectorPaneWidth"
                    Value="40"/>
         </DataTrigger>
      </Style.Triggers>
   </Style>

   <!-- This RowSelector style will be used by a ColumnPropertyRow to add the label
        "Width" to the RowSelector content. -->
   <Style x:Key="widthRowSelector"
          TargetType="xcdg:RowSelector">
      <Setter Property="Template">
         <Setter.Value>
            <ControlTemplate TargetType="xcdg:RowSelector">
               <TextBlock Text="Width"
                          FontSize="10"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Center" />
            </ControlTemplate>
         </Setter.Value>
      </Setter>
   </Style>

   <!-- This RowSelector style will be used by a ColumnPropertyRow to add the label
        "Min" to the RowSelector content. -->
   <Style x:Key="minWidthRowSelector"
          TargetType="xcdg:RowSelector">
      <Setter Property="Template">
         <Setter.Value>
            <ControlTemplate TargetType="xcdg:RowSelector">
               <TextBlock Text="Min"
                          FontSize="10"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Center" />
            </ControlTemplate>
         </Setter.Value>
      </Setter>
   </Style>

   <!-- This RowSelector style will be used by a ColumnPropertyRow to add the label
        "Max" to the RowSelector content. -->
   <Style x:Key="maxWidthRowSelector"
          TargetType="xcdg:RowSelector">
      <Setter Property="Template">
         <Setter.Value>
            <ControlTemplate TargetType="xcdg:RowSelector">
               <TextBlock Text="Max"
                          FontSize="10"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Center" />
            </ControlTemplate>
         </Setter.Value>
      </Setter>
   </Style>
</ResourceDictionary>
